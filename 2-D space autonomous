from typing import List, Tuple


class Drone:
    def __init__(self, start: Tuple[int, int], end: Tuple[int, int], start_time: int):
        self.start = start
        self.end = end
        self.start_time = start_time
        self.path = []

    def calculate_path(self):
        current_time = self.start_time
        current_pos = self.start
        while current_pos != self.end:
            next_pos = self.get_next_position(current_pos, self.end)
            while current_pos != next_pos:
                self.path.append(current_pos)
                current_time += 1
                current_pos = self.get_next_position(current_pos, self.end)
            if current_time >= self.start_time + self.get_distance(self.start, self.end):
                break
        self.path.append(self.end)

    def get_distance(self, pos1: Tuple[int, int], pos2: Tuple[int, int]) -> int:
        return max(abs(pos1[0] - pos2[0]), abs(pos1[1] - pos2[1]))

    def get_next_position(self, current_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[int, int]:
        distance_to_end = self.get_distance(current_pos, end_pos)
        if distance_to_end == 0:
            return current_pos
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        for direction in directions:
            next_pos = (current_pos[0] + direction[0], current_pos[1] + direction[1])
            if next_pos[0] < 0 or next_pos[0] >= 20 or next_pos[1] < 0 or next_pos[1] >= 20:
                continue
            if self.get_distance(next_pos, end_pos) < distance_to_end:
                return next_pos
        return current_pos


def main(drones_input: List[List[int]]) -> List[List[Tuple[int, int]]]:
    drones = [Drone((drone[0], drone[1]), (drone[2], drone[3]), drone[4]) for drone in drones_input]
    for drone in drones:
        drone.calculate_path()
    return [drone.path for drone in drones]


# example input
drones_input = [[0, 0, 5, 5, 0], [10, 10, 15, 15, 5], [5, 10, 15, 10, 10]]

paths = main(drones_input)
for path in paths:
    print(path)
